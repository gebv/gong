package widgets

import (
	"fmt"
	"store"
	"strings"
)



type appCore struct {
	ThemeName string `toml:"theme"`
}

const (
	// ModeSimple ключ как роут, в качестве ключа используется URL path и ищется во всех buckets пока не встретится, иначе page not_found
	ModeSimple = "simple"

	// ModeRoute маршрутизация осуществляется полностью роутингом
	ModeRoute = "route"
)

type configRouting struct {
	Buckets []string `toml:"buckets"`
	Mode    string   `toml:"mode"`
}

type configTheme struct {
	BucketName string `toml:"name"`
}

type configPage struct {
	DefaultContentType string `toml:"default_content_type"`
	PageNotFound       string `toml:"not_found"`
	PageNotAllowed     string `toml:"not_allowed"`
}

// BFI bucket file identifier
type BFI string

func (f BFI) IsValid() bool {
	return len(strings.Fields(string(f))) == 2
}

func (f BFI) Bucket() string {
	if !f.IsValid() {
		return ""
	}

	return strings.Fields(string(f))[0]
}

func (f BFI) File() string {
	if !f.IsValid() {
		return ""
	}

	return strings.Fields(string(f))[1]
}

func (s *Context) IsSimpleModeRouting() bool {
	return s.Routing.Mode == ModeSimple
}

// DefaultRouteBucket возвращает первый bucket из списка routing.buckets
func (s *Context) DefaultRouteBucket() string {
	if len(s.Routing.Buckets) == 0 {
		return ""
	}

	return s.Routing.Buckets[0]
}

// Abort остановка выполнения цепочки файлов
func (c *Context) Abort() {
	c.isAbort = true
}

// Helpfull functions

func (c *Context) IsPost() bool {
	return strings.ToLower(c.Context.Request().Method()) == "post"
}

func (c *Context) Path() string {
	return c.Context.Request().URL().Path()
}

func (c *Context) GetQueryParam(key string) string {
	return c.Context.Request().URL().QueryParam(key)
}

func (c *Context) GetFormValue(key string) string {
	return c.Context.Request().FormValue(key)
}

func (c *Context) Bind(i interface{}) error {
	if !c.IsPost() {
		return fmt.Errorf("only requests with the body")
	}

	// TODO: type json
	// c.Context.Bind(i)

	switch i.(type) {
	case *store.File:
		return c.bindToFile(i.(*store.File))
	case map[string]interface{}:
		return c.bindToMap(i.(map[string]interface{}))
	case M:
		return c.bindToMap(i.(M))
	}

	return fmt.Errorf("not supported type %T", i)
}

// bindToMap связать тело запроса с map
func (c *Context) bindToMap(m map[string]interface{}) error {
	for key, value := range c.Context.Request().FormParams() {
		if len(value) == 1 {
			m[key] = value[0]
		} else {
			m[key] = value
		}
	}

	return nil
}

// bindToMap связать тело запроса с store.File
func (c *Context) bindToFile(file *store.File) error {
	for key, value := range c.Context.Request().FormParams() {
		if key == "ext_id" {
			file.SetExtId(value[0])
			continue
		}

		if key == "id" {
			file.Id.SetString(value[0])
			continue
		}

		if len(value) == 1 {
			file.SetOneProps(key, value[0])
		} else {
			file.SetOneProps(key, value)
		}
	}

	return nil
}

